// Code generated by mockery v2.43.2. DO NOT EDIT.

package appetizer

import (
	context "context"

	zerolog "github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// MockServicer is an autogenerated mock type for the Servicer type
type MockServicer struct {
	mock.Mock
}

type MockServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicer) EXPECT() *MockServicer_Expecter {
	return &MockServicer_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: log, deps
func (_m *MockServicer) Init(log zerolog.Logger, deps Dependencies) error {
	ret := _m.Called(log, deps)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(zerolog.Logger, Dependencies) error); ok {
		r0 = rf(log, deps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicer_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockServicer_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - log zerolog.Logger
//   - deps Dependencies
func (_e *MockServicer_Expecter) Init(log interface{}, deps interface{}) *MockServicer_Init_Call {
	return &MockServicer_Init_Call{Call: _e.mock.On("Init", log, deps)}
}

func (_c *MockServicer_Init_Call) Run(run func(log zerolog.Logger, deps Dependencies)) *MockServicer_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(zerolog.Logger), args[1].(Dependencies))
	})
	return _c
}

func (_c *MockServicer_Init_Call) Return(_a0 error) *MockServicer_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicer_Init_Call) RunAndReturn(run func(zerolog.Logger, Dependencies) error) *MockServicer_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockServicer) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicer_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockServicer_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServicer_Expecter) Run(ctx interface{}) *MockServicer_Run_Call {
	return &MockServicer_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockServicer_Run_Call) Run(run func(ctx context.Context)) *MockServicer_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServicer_Run_Call) Return(_a0 error) *MockServicer_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicer_Run_Call) RunAndReturn(run func(context.Context) error) *MockServicer_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicer creates a new instance of MockServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicer {
	mock := &MockServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
